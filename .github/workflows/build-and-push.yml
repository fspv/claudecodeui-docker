name: Build and Push Docker Image

on:
  push:
    branches: [ master, main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:
    inputs:
      claudecodeui_version:
        description: 'Claude Code UI version to build'
        required: false
        type: string

env:
  REGISTRY: docker.io
  IMAGE_NAME: nuhotetotniksvoboden/claudecodeui

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Get versions
      id: version
      run: |
        if [ -n "${{ inputs.claudecodeui_version }}" ]; then
          echo "claudecodeui_version=${{ inputs.claudecodeui_version }}" >> $GITHUB_OUTPUT
          echo "Building specific version: ${{ inputs.claudecodeui_version }}"
        else
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/siteboon/claudecodeui/releases/latest | jq -r '.tag_name')
          echo "claudecodeui_version=$LATEST_RELEASE" >> $GITHUB_OUTPUT
          echo "Building latest version: $LATEST_RELEASE"
        fi
        
        # Get latest Claude Code version from npm
        CLAUDE_VERSION=$(curl -s https://registry.npmjs.org/@anthropic-ai/claude-code/latest | jq -r '.version')
        echo "claude_version=$CLAUDE_VERSION" >> $GITHUB_OUTPUT
        echo "Using Claude Code version: $CLAUDE_VERSION"
        
        # Determine release type from tag or from workflow dispatch context
        TAG_TO_CHECK="${{ github.ref_name }}"
        
        # For workflow_dispatch, check what would be created
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          # Get the claudecodeui version (either from input or latest)
          if [ -n "${{ inputs.claudecodeui_version }}" ]; then
            CLAUDECODEUI_VER="${{ inputs.claudecodeui_version }}"
          else
            CLAUDECODEUI_VER="$LATEST_RELEASE"
          fi
          # Prioritize combined tag format
          TAG_TO_CHECK="${CLAUDECODEUI_VER}-claude-${CLAUDE_VERSION}"
        fi
        
        if [[ "$TAG_TO_CHECK" =~ ^v[0-9]+\.[0-9]+\.[0-9]+-claude-[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "release_type=combined" >> $GITHUB_OUTPUT
        elif [[ "$TAG_TO_CHECK" =~ ^claude-[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "release_type=claude-only" >> $GITHUB_OUTPUT
        elif [[ "$TAG_TO_CHECK" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "release_type=claudecodeui-only" >> $GITHUB_OUTPUT
        else
          echo "release_type=other" >> $GITHUB_OUTPUT
        fi

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ steps.version.outputs.claudecodeui_version }},enable=true
          type=raw,value=${{ steps.version.outputs.claudecodeui_version }}-claude-${{ steps.version.outputs.claude_version }},enable=true

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          CLAUDE_CODE_VERSION=${{ steps.version.outputs.claude_version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Determine release tag
      id: release-tag
      if: github.event_name == 'workflow_dispatch' && inputs.claudecodeui_version != ''
      run: |
        # When triggered by check-upstream workflow, we need to find the appropriate tag
        CLAUDECODEUI_VERSION="${{ steps.version.outputs.claudecodeui_version }}"
        CLAUDE_VERSION="${{ steps.version.outputs.claude_version }}"
        
        # Check for combined tag first
        COMBINED_TAG="${CLAUDECODEUI_VERSION}-claude-${CLAUDE_VERSION}"
        if git ls-remote --tags origin | grep -q "refs/tags/${COMBINED_TAG}"; then
          echo "tag_name=${COMBINED_TAG}" >> $GITHUB_OUTPUT
          echo "tag_exists=true" >> $GITHUB_OUTPUT
          echo "Found combined tag: ${COMBINED_TAG}"
        # Check for claudecodeui-only tag
        elif git ls-remote --tags origin | grep -q "refs/tags/${CLAUDECODEUI_VERSION}"; then
          echo "tag_name=${CLAUDECODEUI_VERSION}" >> $GITHUB_OUTPUT
          echo "tag_exists=true" >> $GITHUB_OUTPUT
          echo "Found claudecodeui tag: ${CLAUDECODEUI_VERSION}"
        # Check for claude-only tag
        elif git ls-remote --tags origin | grep -q "refs/tags/claude-${CLAUDE_VERSION}"; then
          echo "tag_name=claude-${CLAUDE_VERSION}" >> $GITHUB_OUTPUT
          echo "tag_exists=true" >> $GITHUB_OUTPUT
          echo "Found claude tag: claude-${CLAUDE_VERSION}"
        else
          echo "tag_exists=false" >> $GITHUB_OUTPUT
          echo "No matching tag found"
        fi

    - name: Create GitHub Release
      if: |
        (startsWith(github.ref, 'refs/tags/') && github.event_name == 'push') ||
        (github.event_name == 'workflow_dispatch' && steps.release-tag.outputs.tag_exists == 'true')
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || steps.release-tag.outputs.tag_name }}
        name: |
          ${{ steps.version.outputs.release_type == 'combined' && format('Claude Code UI {0} with Claude Code {1}', steps.version.outputs.claudecodeui_version, steps.version.outputs.claude_version) ||
              steps.version.outputs.release_type == 'claude-only' && format('Claude Code {0} Update', steps.version.outputs.claude_version) ||
              steps.version.outputs.release_type == 'claudecodeui-only' && format('Claude Code UI {0}', steps.version.outputs.claudecodeui_version) ||
              format('Release {0}', github.ref_name) }}
        body: |
          ## üê≥ Docker Images
          
          This release is available as Docker images on Docker Hub:
          
          ### Pull Commands
          ```bash
          # Pull the specific version
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          
          # Pull with specific architecture
          docker pull --platform linux/amd64 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          docker pull --platform linux/arm64 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          ```
          
          ### üì¶ Version Information
          - **Claude Code UI**: [`${{ steps.version.outputs.claudecodeui_version }}`](https://github.com/siteboon/claudecodeui/releases/tag/${{ steps.version.outputs.claudecodeui_version }})
          - **Claude Code**: [`v${{ steps.version.outputs.claude_version }}`](https://www.npmjs.com/package/@anthropic-ai/claude-code/v/${{ steps.version.outputs.claude_version }})
          
          ### üîó Links
          - [Docker Hub](https://hub.docker.com/r/${{ env.IMAGE_NAME }}/tags?page=1&name=${{ github.ref_name }})
          - [All Available Tags](https://hub.docker.com/r/${{ env.IMAGE_NAME }}/tags)
          
          ### ü§ñ Automated Release
          This is an automated release created when new versions were detected.
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
